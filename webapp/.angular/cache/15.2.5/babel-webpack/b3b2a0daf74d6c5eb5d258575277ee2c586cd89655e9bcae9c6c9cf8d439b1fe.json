{"ast":null,"code":"import _asyncToGenerator from \"/home/andrew/Dropbox/school/408/group_project/src/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Mesh, MeshBasicMaterial, OrthographicCamera, PlaneGeometry, Scene, WebGLRenderTarget } from 'three';\nimport { blobCanvas } from '../../model-viewer-base.js';\nimport { Renderer } from '../../three-components/Renderer.js';\nimport { $correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement } from './three-dom-element.js';\nconst quadMaterial = new MeshBasicMaterial();\nconst quad = new PlaneGeometry(2, 2);\nlet adhocNum = 0;\nexport const $threeTexture = Symbol('threeTexture');\nexport const $applyTexture = Symbol('applyTexture');\n/**\n * Image facade implementation for Three.js textures\n */\nexport class Image extends ThreeDOMElement {\n  get [$threeTexture]() {\n    var _a;\n    console.assert(this[$correlatedObjects] != null && this[$correlatedObjects].size > 0, 'Image correlated object is undefined');\n    return (_a = this[$correlatedObjects]) === null || _a === void 0 ? void 0 : _a.values().next().value;\n  }\n  constructor(onUpdate, texture, gltfImage) {\n    gltfImage = gltfImage !== null && gltfImage !== void 0 ? gltfImage : {\n      name: texture && texture.image && texture.image.src ? texture.image.src.split('/').pop() : 'adhoc_image',\n      uri: texture && texture.image && texture.image.src ? texture.image.src : 'adhoc_image' + adhocNum++\n    };\n    super(onUpdate, gltfImage, new Set(texture ? [texture] : []));\n  }\n  get name() {\n    return this[$sourceObject].name || '';\n  }\n  get uri() {\n    return this[$sourceObject].uri;\n  }\n  get bufferView() {\n    return this[$sourceObject].bufferView;\n  }\n  get element() {\n    const texture = this[$threeTexture];\n    if (texture && (texture.isCanvasTexture || texture.isVideoTexture)) {\n      return texture.image;\n    }\n    return;\n  }\n  get animation() {\n    const texture = this[$threeTexture];\n    if (texture && texture.isCanvasTexture && texture.animation) {\n      return texture.animation;\n    }\n    return;\n  }\n  get type() {\n    return this.uri != null ? 'external' : 'embedded';\n  }\n  set name(name) {\n    this[$sourceObject].name = name;\n  }\n  update() {\n    const texture = this[$threeTexture];\n    // Applies to non-Lottie canvas textures only\n    if (texture && texture.isCanvasTexture && !texture.animation) {\n      this[$threeTexture].needsUpdate = true;\n      this[$onUpdate]();\n    }\n  }\n  createThumbnail(width, height) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const scene = new Scene();\n      quadMaterial.map = _this[$threeTexture];\n      const mesh = new Mesh(quad, quadMaterial);\n      scene.add(mesh);\n      const camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n      const {\n        threeRenderer\n      } = Renderer.singleton;\n      const renderTarget = new WebGLRenderTarget(width, height);\n      threeRenderer.setRenderTarget(renderTarget);\n      threeRenderer.render(scene, camera);\n      threeRenderer.setRenderTarget(null);\n      const buffer = new Uint8Array(width * height * 4);\n      threeRenderer.readRenderTargetPixels(renderTarget, 0, 0, width, height, buffer);\n      blobCanvas.width = width;\n      blobCanvas.height = height;\n      const blobContext = blobCanvas.getContext('2d');\n      const imageData = blobContext.createImageData(width, height);\n      imageData.data.set(buffer);\n      blobContext.putImageData(imageData, 0, 0);\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          blobCanvas.toBlob(blob => {\n            if (!blob) {\n              return reject('Failed to capture thumbnail.');\n            }\n            resolve(URL.createObjectURL(blob));\n          }, 'image/png');\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}\n//# sourceMappingURL=image.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}