{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"mv\"];\nfunction AppComponent_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 5)(1, \"div\", 6);\n    i0.ɵɵtext(2, \"Test\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"slot\", \"hotspot-\" + i_r3)(\"data-position\", ctx_r1.position(item_r2))(\"data-normal\", ctx_r1.normal(item_r2));\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(service) {\n      this.service = service;\n      this.data = [];\n      this.self_address = \"\";\n      this.status = \"\";\n    }\n    position(item) {\n      var c = toCartesian(item.location);\n      return 500 * c.x + \" \" + 500 * c.y + \" \" + 500 * c.z;\n    }\n    normal(item) {\n      var c = toCartesian(item.location);\n      return c.x + \" \" + c.y + \" \" + c.z;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {}\n    init(mv) {\n      this.service.getLocations().subscribe(res => {\n        this.data = res.list;\n        this.self_address = res.self_address;\n        this.status = res.status;\n        for (let item of this.data) {\n          if (item.address == this.self_address) {\n            console.log(item);\n            let orbit_lon = item.location.lon + 180;\n            let orbit_lat = 90 - item.location.lat;\n            mv.cameraOrbit = orbit_lon + \"deg \" + orbit_lat + \"deg 1111m\";\n          }\n        }\n      });\n    }\n  }\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.AppService));\n  };\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewer = _t.first);\n      }\n    },\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"viewer-container\"], [\"alt\", \"Failed to load model\", \"src\", \"./assets/Earth_1_12756.glb\", \"background-color\", \"black\", \"shadow-intensity\", \"0\", \"camera-controls\", \"\", \"touch-action\", \"pan-y\", \"disable-pan\", \"\", \"disable-tap\", \"\", \"interaction-prompt\", \"none\", 1, \"viewer\", 3, \"load\"], [\"mv\", \"\"], [\"class\", \"hotspot\", 4, \"ngFor\", \"ngForOf\"], [1, \"ui-container\"], [1, \"hotspot\"], [1, \"annotation\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r4 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"model-viewer\", 1, 2);\n        i0.ɵɵlistener(\"load\", function AppComponent_Template_model_viewer_load_1_listener() {\n          i0.ɵɵrestoreView(_r4);\n          const _r0 = i0.ɵɵreference(2);\n          return i0.ɵɵresetView(ctx.init(_r0));\n        });\n        i0.ɵɵtemplate(3, AppComponent_button_3_Template, 3, 3, \"button\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(4, \"div\", 4);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.data);\n      }\n    },\n    dependencies: [i2.NgForOf],\n    styles: [\".viewer[_ngcontent-%COMP%]{width:100%;height:100%}.viewer-container[_ngcontent-%COMP%]{z-index:0;display:block;position:fixed;left:0;top:0;width:100%;height:100%;margin:0 auto;padding:0;background-color:#000}.hotspot[_ngcontent-%COMP%]{border:2px solid black;background-color:#fff;width:20px;aspect-ratio:1 / 1;border-radius:50%}.hotspot[_ngcontent-%COMP%]:hover{cursor:pointer}.ui-container[_ngcontent-%COMP%]{left:10px;top:10px;position:relative;z-index:10}\"]\n  });\n  return AppComponent;\n})();\nfunction rad(n) {\n  return n * Math.PI / 180;\n}\nfunction toCartesian(c) {\n  return {\n    x: Math.cos(rad(c.lat)) * Math.cos(rad(-c.lon - 90)),\n    y: Math.sin(rad(c.lat)),\n    z: Math.cos(rad(c.lat)) * Math.sin(rad(-c.lon - 90))\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}